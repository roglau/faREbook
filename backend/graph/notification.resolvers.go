package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/roglau/WEB-RA-231/graph/model"
)

// CreateNotif is the resolver for the createNotif field.
func (r *mutationResolver) CreateNotif(ctx context.Context, inputNotif model.NewNotification) (*model.Notification, error) {
	notif := &model.Notification{
		// ctrl .
		ID:        uuid.NewString(),
		UserID:    inputNotif.UserID,
		Notif:     inputNotif.Notif,
		User2id:   inputNotif.User2id,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		IsRead:    false,
	}

	return notif, r.DB.Save(&notif).Error
}

// GetAllNotif is the resolver for the getAllNotif field.
func (r *queryResolver) GetAllNotif(ctx context.Context, userID string) (*model.NotifListWCount, error) {
	var notifications []*model.Notification
	var notificationsList []*model.NotificationList

	if err := r.DB.Where("user_id = ?", userID).Find(&notifications).Error; err != nil {
		return nil, err
	}

	count := 0

	for _, notif := range notifications {
		if !notif.IsRead {
			count++
		}

		user, err := r.Query().GetUser(ctx, notif.User2id)

		if err != nil {
			continue
		}

		notificationsList = append(notificationsList, &model.NotificationList{
			Notif: notif,
			User2: user,
		})
	}

	listWCount := &model.NotifListWCount{
		NotifLists:   notificationsList,
		NotReadCount: count,
	}

	return listWCount, nil
}

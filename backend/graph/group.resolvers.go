package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/roglau/WEB-RA-231/graph/model"
)

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, inputGroup model.NewGroup, userID string, invited []string) (*model.Group, error) {
	var gID string = uuid.NewString()
	group := &model.Group{
		ID:        gID,
		Name:      inputGroup.Name,
		Privacy:   inputGroup.Privacy,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Profile:   "https://res.cloudinary.com/diuzx0kak/image/upload/v1692327787/Screenshot_2023-08-18_100121_xtihi9.png",
	}

	if err := r.DB.Save(&group).Error; err != nil {
		return nil, err
	}

	r.CreateGroupMember(ctx, gID, userID, "Admin")

	for _, member := range invited {
		r.CreateGroupInvited(ctx, gID, member)
	}

	return group, nil
}

// CreateGroupMember is the resolver for the createGroupMember field.
func (r *mutationResolver) CreateGroupMember(ctx context.Context, groupID string, members string, role string) (*model.GroupMembers, error) {
	groupMember := &model.GroupMembers{
		ID:      uuid.NewString(),
		GroupID: groupID,
		UserID:  members,
		Role:    role,
	}

	if err := r.DB.Save(&groupMember).Error; err != nil {
		return nil, err
	}

	return groupMember, nil
}

// CreateGroupInvited is the resolver for the createGroupInvited field.
func (r *mutationResolver) CreateGroupInvited(ctx context.Context, groupID string, invited string) (*model.GroupInvited, error) {
	groupMember := &model.GroupInvited{
		ID:      uuid.NewString(),
		GroupID: groupID,
		UserID:  invited,
	}

	if err := r.DB.Save(&groupMember).Error; err != nil {
		return nil, err
	}

	return groupMember, nil
}

// CreateGroupJoin is the resolver for the createGroupJoin field.
func (r *mutationResolver) CreateGroupJoin(ctx context.Context, groupID string, userID string) (*model.GroupJoin, error) {
	groupMember := &model.GroupJoin{
		ID:      uuid.NewString(),
		GroupID: groupID,
		UserID:  userID,
	}

	if err := r.DB.Save(&groupMember).Error; err != nil {
		return nil, err
	}

	return groupMember, nil
}

// AcceptJoin is the resolver for the acceptJoin field.
func (r *mutationResolver) AcceptJoin(ctx context.Context, groupID string, userID string) (bool, error) {
	err := r.DB.Where("group_id = ? AND user_id = ?", groupID, userID).Delete(&model.GroupJoin{}).Error
	if err != nil {
		return false, err
	}

	r.CreateGroupMember(ctx, groupID, userID, "Member")

	return true, nil
}

// DeleteJoin is the resolver for the deleteJoin field.
func (r *mutationResolver) DeleteJoin(ctx context.Context, groupID string, userID string) (bool, error) {
	err := r.DB.Where("group_id = ? AND user_id = ?", groupID, userID).Delete(&model.GroupJoin{}).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateGroupPost is the resolver for the createGroupPost field.
func (r *mutationResolver) CreateGroupPost(ctx context.Context, inputPost model.NewGroupPost, medias []string) (*model.GroupPost, error) {
	post := &model.GroupPost{
		ID:        uuid.NewString(),
		GroupID:   inputPost.GroupID,
		UserID:    inputPost.UserID,
		Content:   inputPost.Content,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}

	if err := r.DB.Save(&post).Error; err != nil {
		return nil, err
	}

	// If there are medias, create associated PostMedia entries
	if len(medias) > 0 {
		for _, media := range medias {
			inputMedia := model.NewPostMedia{
				PostID: post.ID,
				Media:  media,
			}
			if _, err := r.CreatePostMedia(ctx, inputMedia); err != nil {
				return nil, err
			}
		}
	}

	return post, nil
}

// AcceptInvite is the resolver for the acceptInvite field.
func (r *mutationResolver) AcceptInvite(ctx context.Context, groupID string, invited string) (bool, error) {
	err := r.DB.Where("group_id = ? AND user_id = ?", groupID, invited).Delete(&model.GroupInvited{}).Error
	if err != nil {
		return false, err
	}

	r.CreateGroupMember(ctx, groupID, invited, "Member")

	return true, nil
}

// DeleteInvite is the resolver for the deleteInvite field.
func (r *mutationResolver) DeleteInvite(ctx context.Context, groupID string, invited string) (bool, error) {
	err := r.DB.Where("group_id = ? AND user_id = ?", groupID, invited).Delete(&model.GroupInvited{}).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteGroupPost is the resolver for the deleteGroupPost field.
func (r *mutationResolver) DeleteGroupPost(ctx context.Context, groupID string) (bool, error) {
	err := r.DB.Where("id = ?", groupID).Delete(&model.GroupPost{}).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateGroupFiles is the resolver for the createGroupFiles field.
func (r *mutationResolver) CreateGroupFiles(ctx context.Context, inputFiles model.NewGroupFiles) (*model.GroupFiles, error) {
	file := &model.GroupFiles{
		ID:        uuid.NewString(),
		GroupID:   inputFiles.GroupID,
		UserID:    inputFiles.UserID,
		Name:      inputFiles.Name,
		Type:      inputFiles.Type,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		URL:       inputFiles.URL,
	}

	if err := r.DB.Save(&file).Error; err != nil {
		return nil, err
	}

	return file, nil
}

// DeleteGroupFiles is the resolver for the deleteGroupFiles field.
func (r *mutationResolver) DeleteGroupFiles(ctx context.Context, fileID string) (bool, error) {
	err := r.DB.Where("id = ?", fileID).Delete(&model.GroupFiles{}).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// PromoteMember is the resolver for the promoteMember field.
func (r *mutationResolver) PromoteMember(ctx context.Context, memberID string, groupID string) (bool, error) {
	var user *model.GroupMembers

	r.DB.Where("group_id = ? AND user_id = ?", groupID, memberID).First(&user)

	if err := r.DB.Where("group_id = ? AND user_id = ?", groupID, memberID).First(&user).Error; err != nil {
		return false, err
	}

	user.Role = "Admin"

	return true, r.DB.Save(&user).Error
}

// DeleteMember is the resolver for the deleteMember field.
func (r *mutationResolver) DeleteMember(ctx context.Context, memberID string, groupID string) (bool, error) {
	err := r.DB.Where("group_id = ? AND user_id = ?", groupID, memberID).Delete(&model.GroupMembers{}).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteMemberNGroup is the resolver for the deleteMemberNGroup field.
func (r *mutationResolver) DeleteMemberNGroup(ctx context.Context, memberID string, groupID string) (bool, error) {
	err := r.DB.Where("group_id = ? AND user_id = ?", groupID, memberID).Delete(&model.GroupMembers{}).Error
	if err != nil {
		return false, err
	}

	errs := r.DB.Where("id = ?", groupID).Delete(&model.Group{}).Error
	if errs != nil {
		return false, errs
	}

	return true, nil
}

// UpdateGroupProfile is the resolver for the updateGroupProfile field.
func (r *mutationResolver) UpdateGroupProfile(ctx context.Context, groupID string, profile string) (bool, error) {
	var group *model.Group

	r.DB.Where("id = ?", groupID).First(&group)

	if err := r.DB.Where("id = ?", groupID).First(&group).Error; err != nil {
		return false, err
	}

	group.Profile = profile

	return true, r.DB.Save(&group).Error
}

// GetAllGroup is the resolver for the getAllGroup field.
func (r *queryResolver) GetAllGroup(ctx context.Context, userID string) ([]*model.GroupList, error) {
	var groups []*model.Group

	if err := r.DB.Where("privacy = ?", "public").Find(&groups).Error; err != nil {
		return nil, err
	}

	var groupList []*model.GroupList

	for _, group := range groups {

		var posts []*model.GroupPost

		if err := r.DB.Where("group_id = ?", group.ID).Find(&posts).Error; err != nil {
			return nil, err
		}

		var fileLists []*model.GroupFilesList
		var files []*model.GroupFiles

		if err := r.DB.Where("group_id = ?", group.ID).Find(&files).Error; err != nil {
			return nil, err
		}

		for _, file := range files {
			user, err := r.Query().GetUser(ctx, file.UserID)
			if err != nil {
				return nil, err
			}

			fileLists = append(fileLists, &model.GroupFilesList{
				Files:    file,
				Uploader: user,
			})
		}

		var postLists []*model.GroupPostList

		for _, post := range posts {
			// fmt.Println(post)

			medias, err := r.GetAllMediaPost(ctx, post.ID)
			if err != nil {
				return nil, err
			}

			user, err := r.Query().GetUser(ctx, post.UserID)
			if err != nil {
				return nil, err
			}

			post.User = user

			comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
			if err != nil {
				return nil, err
			}

			likes, err := r.Query().GetAllLikePost(ctx, post.ID)

			if err != nil {
				return nil, err
			}

			postLists = append(postLists, &model.GroupPostList{
				Posts:    post,
				Medias:   medias,
				Comments: comments,
				Likes:    likes,
			})
		}

		var groupMembers []*model.GroupMembers
		if err := r.DB.Where("group_id = ? AND role = ?", group.ID, "Member").Find(&groupMembers).Error; err != nil {
			return nil, err
		}

		isMember := false
		var members []*model.User
		for _, member := range groupMembers {
			if member.UserID == userID {
				isMember = true
			}
			var user *model.User
			if err := r.DB.Where("id = ?", member.UserID).Find(&user).Error; err != nil {
				continue
			}

			members = append(members, user)
		}

		var adminM []*model.GroupMembers
		if err := r.DB.Where("group_id = ? AND role = ?", group.ID, "Admin").Find(&adminM).Error; err != nil {
			return nil, err
		}

		isAdmin := false
		var admins []*model.User
		for _, admin := range adminM {
			if admin.UserID == userID {
				isAdmin = true
			}
			var user *model.User
			if err := r.DB.Where("id = ?", admin.UserID).Find(&user).Error; err != nil {
				continue
			}

			admins = append(admins, user)
		}

		hasJoinRequest := false
		hasInvited := false

		if !isAdmin && !isMember {
			join, err := r.HasGroupJoin(ctx, userID, group.ID)
			if err != nil {
				return nil, err
			}
			inv, err := r.HasGroupInvite(ctx, userID, group.ID)
			if err != nil {
				return nil, err
			}

			hasJoinRequest = join
			hasInvited = inv
		}

		groupList = append(groupList, &model.GroupList{
			Group:          group,
			Admin:          admins,
			Members:        members,
			Posts:          postLists,
			IsMember:       isMember,
			IsAdmin:        isAdmin,
			HasJoinRequest: hasJoinRequest,
			HasInvited:     hasInvited,
			Files:          fileLists,
		})

	}

	return groupList, nil
}

// GetGroup is the resolver for the getGroup field.
func (r *queryResolver) GetGroup(ctx context.Context, groupID string, userID string) (*model.GroupList, error) {
	var group *model.Group

	if err := r.DB.Where("id = ?", groupID).Find(&group).Error; err != nil {
		return nil, err
	}

	var fileLists []*model.GroupFilesList
	var files []*model.GroupFiles

	if err := r.DB.Where("group_id = ?", group.ID).Find(&files).Error; err != nil {
		return nil, err
	}

	for _, file := range files {
		user, err := r.Query().GetUser(ctx, file.UserID)
		if err != nil {
			return nil, err
		}

		fileLists = append(fileLists, &model.GroupFilesList{
			Files:    file,
			Uploader: user,
		})
	}

	var posts []*model.GroupPost

	if err := r.DB.Where("group_id = ?", group.ID).Find(&posts).Error; err != nil {
		return nil, err
	}

	var postLists []*model.GroupPostList

	for _, post := range posts {
		// fmt.Println(post)

		medias, err := r.GetAllMediaPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		user, err := r.Query().GetUser(ctx, post.UserID)
		if err != nil {
			return nil, err
		}

		post.User = user

		comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		likes, err := r.Query().GetAllLikePost(ctx, post.ID)

		if err != nil {
			return nil, err
		}

		postLists = append(postLists, &model.GroupPostList{
			Posts:    post,
			Medias:   medias,
			Comments: comments,
			Likes:    likes,
		})
	}

	var groupList *model.GroupList

	var groupMembers []*model.GroupMembers
	if err := r.DB.Where("group_id = ? AND role = ?", group.ID, "Member").Find(&groupMembers).Error; err != nil {
		return nil, err
	}

	isMember := false
	var members []*model.User
	for _, member := range groupMembers {
		if member.UserID == userID {
			isMember = true
		}
		var user *model.User
		if err := r.DB.Where("id = ?", member.UserID).Find(&user).Error; err != nil {
			continue
		}

		members = append(members, user)
	}

	var adminM []*model.GroupMembers
	if err := r.DB.Where("group_id = ? AND role = ?", group.ID, "Admin").Find(&adminM).Error; err != nil {
		return nil, err
	}

	isAdmin := false
	var admins []*model.User
	for _, admin := range adminM {
		if admin.UserID == userID {
			isAdmin = true
		}
		var user *model.User
		if err := r.DB.Where("id = ?", admin.UserID).Find(&user).Error; err != nil {
			continue
		}

		admins = append(admins, user)
	}

	hasJoinRequest := false
	hasInvited := false

	if !isAdmin && !isMember {
		join, err := r.HasGroupJoin(ctx, userID, group.ID)
		if err != nil {
			return nil, err
		}
		inv, err := r.HasGroupInvite(ctx, userID, group.ID)
		if err != nil {
			return nil, err
		}

		hasJoinRequest = join
		hasInvited = inv
	}

	var joins []*model.User

	var gj []*model.GroupJoin

	if err := r.DB.Where("group_id = ?", group.ID).Find(&gj).Error; err != nil {
		return nil, err
	}

	for _, gjoin := range gj {
		var user *model.User

		if err := r.DB.Where("id = ?", gjoin.UserID).First(&user).Error; err != nil {
			return nil, err
		}

		joins = append(joins, user)
	}

	groupList = &model.GroupList{
		Group:          group,
		Admin:          admins,
		Members:        members,
		Posts:          postLists,
		IsMember:       isMember,
		IsAdmin:        isAdmin,
		HasJoinRequest: hasJoinRequest,
		HasInvited:     hasInvited,
		Files:          fileLists,
		JoinRequest:    joins,
	}

	return groupList, nil
}

// GetAllGroupUser is the resolver for the getAllGroupUser field.
func (r *queryResolver) GetAllGroupUser(ctx context.Context, userID string) ([]*model.GroupList, error) {
	var groupMember []*model.GroupMembers
	var groupLists []*model.GroupList

	if err := r.DB.Where("user_id = ?", userID).Find(&groupMember).Error; err != nil {
		return nil, err
	}

	for _, gm := range groupMember {
		var group *model.Group
		err := r.DB.Where("id = ?", gm.GroupID).First(&group).Error
		if err != nil {
			continue
		}

		var posts []*model.GroupPost

		if err := r.DB.Where("group_id = ?", group.ID).Find(&posts).Error; err != nil {
			return nil, err
		}

		var postLists []*model.GroupPostList

		for _, post := range posts {
			// fmt.Println(post)

			medias, err := r.GetAllMediaPost(ctx, post.ID)
			if err != nil {
				return nil, err
			}

			user, err := r.Query().GetUser(ctx, post.UserID)
			if err != nil {
				return nil, err
			}

			post.User = user

			comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
			if err != nil {
				return nil, err
			}

			likes, err := r.Query().GetAllLikePost(ctx, post.ID)

			if err != nil {
				return nil, err
			}

			postLists = append(postLists, &model.GroupPostList{
				Posts:    post,
				Medias:   medias,
				Comments: comments,
				Likes:    likes,
			})
		}

		var groupMembers []*model.GroupMembers
		if err := r.DB.Where("group_id = ? AND role = ?", group.ID, "Member").Find(&groupMembers).Error; err != nil {
			return nil, err
		}

		isMember := false
		var members []*model.User
		for _, member := range groupMembers {
			if member.UserID == userID {
				isMember = true
			}
			var user *model.User
			if err := r.DB.Where("id = ?", member.UserID).Find(&user).Error; err != nil {
				continue
			}

			members = append(members, user)
		}

		var adminM []*model.GroupMembers
		if err := r.DB.Where("group_id = ? AND role = ?", group.ID, "Admin").Find(&adminM).Error; err != nil {
			return nil, err
		}

		isAdmin := false
		var admins []*model.User
		for _, admin := range adminM {
			if admin.UserID == userID {
				isAdmin = true
			}
			var user *model.User
			if err := r.DB.Where("id = ?", admin.UserID).Find(&user).Error; err != nil {
				continue
			}

			admins = append(admins, user)
		}

		groupLists = append(groupLists, &model.GroupList{
			Group:    group,
			Admin:    admins,
			Members:  members,
			Posts:    postLists,
			IsMember: isMember,
			IsAdmin:  isAdmin,
		})

	}

	return groupLists, nil
}

// GetAllInvite is the resolver for the getAllInvite field.
func (r *queryResolver) GetAllInvite(ctx context.Context, userID string) ([]*model.GroupInvites, error) {
	var invites []*model.GroupInvited

	if err := r.DB.Where("user_id = ?", userID).Find(&invites).Error; err != nil {
		return nil, err
	}

	var groups []*model.GroupInvites

	for _, invite := range invites {
		var groupInv *model.GroupInvites
		var group *model.Group
		err := r.DB.Where("id = ?", invite.GroupID).First(&group).Error
		if err != nil {
			continue
		}

		var groupMember *model.GroupMembers
		err = r.DB.Where("group_id = ? AND role = ?", invite.GroupID, "Admin").First(&groupMember).Error
		if err != nil {
			return nil, err
		}

		var user *model.User
		err = r.DB.Where("id = ?", groupMember.UserID).First(&user).Error
		if err != nil {
			return nil, err
		}

		groupInv = &model.GroupInvites{
			Group: group,
			Admin: user,
		}
		groups = append(groups, groupInv)
	}

	return groups, nil
}

// GetGroupPost is the resolver for the getGroupPost field.
func (r *queryResolver) GetGroupPost(ctx context.Context, postID string) (*model.GroupPostList, error) {
	var post *model.GroupPost

	if err := r.DB.Where("id = ?", postID).First(&post).Error; err != nil {
		return nil, err
	}

	medias, err := r.Query().GetAllMediaPost(ctx, post.ID)
	if err != nil {
		return nil, err
	}

	user, err := r.Query().GetUser(ctx, post.UserID)
	if err != nil {
		return nil, err
	}

	post.User = user

	comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
	if err != nil {
		return nil, err
	}

	likes, err := r.Query().GetAllLikePost(ctx, post.ID)

	if err != nil {
		return nil, err
	}

	postList := &model.GroupPostList{
		Posts:    post,
		Medias:   medias,
		Comments: comments,
		Likes:    likes,
	}

	return postList, nil
}

// GetAllInvites is the resolver for the getAllInvites field.
func (r *queryResolver) GetAllInvites(ctx context.Context, groupID string) ([]*model.GroupInvited, error) {
	var invites []*model.GroupInvited

	if err := r.DB.Where("group_id = ?", groupID).Find(&invites).Error; err != nil {
		return nil, err
	}

	return invites, nil
}

// GetAllJoin is the resolver for the getAllJoin field.
func (r *queryResolver) GetAllJoin(ctx context.Context, groupID string) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: GetAllJoin - getAllJoin"))
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) HasGroupJoin(ctx context.Context, userID string, groupID string) (bool, error) {
	var count int64
	if err := r.DB.Model(&model.GroupJoin{}).Where("group_id = ? AND user_id = ?", groupID, userID).Count(&count).Error; err != nil {
		return false, err
	}
	return count > 0, nil
}
func (r *queryResolver) HasGroupInvite(ctx context.Context, userID string, groupID string) (bool, error) {
	var count int64
	if err := r.DB.Model(&model.GroupInvited{}).Where("group_id = ? AND user_id = ?", groupID, userID).Count(&count).Error; err != nil {
		return false, err
	}
	return count > 0, nil
}

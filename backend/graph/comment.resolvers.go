package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/roglau/WEB-RA-231/graph/model"
	"gorm.io/gorm"
)

// CreateLikeComment is the resolver for the createLikeComment field.
func (r *mutationResolver) CreateLikeComment(ctx context.Context, inputLikeComment model.NewLikeComment) (*model.LikeComment, error) {
	var like *model.LikeComment

	if err := r.DB.First(&like, "comment_id = ? AND user_id = ?", inputLikeComment.CommentID, inputLikeComment.UserID).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			// Post like does not exist, so create a new one.
			newCommentLike := &model.LikeComment{
				ID:        uuid.NewString(),
				CommentID: inputLikeComment.CommentID,
				UserID:    inputLikeComment.UserID,
				Liked:     true,
			}
			if err := r.DB.Create(newCommentLike).Error; err != nil {
				return nil, err
			}
			return newCommentLike, nil
		}
		// Error occurred while querying the database.
		return nil, err
	}

	like.Liked = !inputLikeComment.Liked

	if err := r.DB.Save(&like).Error; err != nil {
		return nil, err
	}

	return like, nil
}

// CreateReplyComment is the resolver for the createReplyComment field.
func (r *mutationResolver) CreateReplyComment(ctx context.Context, inputReplyComment model.NewReplyComment) (*model.ReplyComment, error) {
	var user *model.User
	var err error

	user, err = r.Query().GetUser(ctx, inputReplyComment.UserID)
	if err != nil {
		return nil, err
	}

	replyComment := &model.ReplyComment{
		ID:        uuid.NewString(),
		CommentID: inputReplyComment.CommentID,
		UserID:    inputReplyComment.UserID,
		Reply:     inputReplyComment.Reply,
		User:      user,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}
	return replyComment, r.DB.Save(&replyComment).Error
}

// GetAllLikeComment is the resolver for the getAllLikeComment field.
func (r *queryResolver) GetAllLikeComment(ctx context.Context, id string) ([]*model.User, error) {
	var likes []*model.LikeComment
	// fmt.Println("woaidanw")
	if err := r.DB.Where("comment_id = ? AND liked = ?", id, true).Find(&likes).Error; err != nil {
		return nil, err
	}

	// fmt.Println(likes)

	var users []*model.User

	for _, like := range likes {
		user, err := r.Query().GetUser(ctx, like.UserID)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}

	// fmt.Println(users)

	return users, nil
}

// GetAllReplyComment is the resolver for the getAllReplyComment field.
func (r *queryResolver) GetAllReplyComment(ctx context.Context, id string) ([]*model.ReplyComment, error) {
	var comments []*model.ReplyComment
	// fmt.Println("woaidanw")
	if err := r.DB.Where("comment_id = ?", id).Find(&comments).Error; err != nil {
		return nil, err
	}

	for _, comment := range comments {
		user, err := r.Query().GetUser(ctx, comment.UserID)
		if err != nil {
			return nil, err
		}

		comment.User = user

	}

	return comments, nil
}

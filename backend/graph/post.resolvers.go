package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/roglau/WEB-RA-231/graph/model"
	"gorm.io/gorm"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, inputPost model.NewPost, medias []string) (*model.Post, error) {
	post := &model.Post{
		ID:        uuid.NewString(),
		UserName:  inputPost.UserName,
		UserID:    inputPost.UserID,
		Content:   inputPost.Content,
		Privacy:   inputPost.Privacy,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}

	if err := r.DB.Save(&post).Error; err != nil {
		return nil, err
	}

	// If there are medias, create associated PostMedia entries
	if len(medias) > 0 {
		for _, media := range medias {
			inputMedia := model.NewPostMedia{
				PostID: post.ID,
				Media:  media,
			}
			if _, err := r.CreatePostMedia(ctx, inputMedia); err != nil {
				return nil, err
			}
		}
	}

	return post, nil
}

// CreatePostMedia is the resolver for the createPostMedia field.
func (r *mutationResolver) CreatePostMedia(ctx context.Context, inputMedia model.NewPostMedia) (*model.PostMedia, error) {
	postMedia := &model.PostMedia{
		ID:     uuid.NewString(),
		PostID: inputMedia.PostID,
		Media:  inputMedia.Media,
	}

	return postMedia, r.DB.Save(&postMedia).Error
}

// CreatePostComment is the resolver for the createPostComment field.
func (r *mutationResolver) CreatePostComment(ctx context.Context, inputComment model.NewPostComment) (*model.PostComment, error) {
	var user *model.User
	var err error

	user, err = r.Query().GetUser(ctx, inputComment.UserID)
	if err != nil {
		return nil, err
	}

	postComment := &model.PostComment{
		ID:        uuid.NewString(),
		PostID:    inputComment.PostID,
		Comment:   inputComment.Comment,
		UserID:    inputComment.UserID,
		User:      user,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}
	return postComment, r.DB.Save(&postComment).Error
}

// CreatePostLike is the resolver for the createPostLike field.
func (r *mutationResolver) CreatePostLike(ctx context.Context, inputLike model.NewPostLike) (*model.PostLike, error) {
	var like *model.PostLike

	if err := r.DB.First(&like, "post_id = ? AND user_id = ?", inputLike.PostID, inputLike.UserID).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			// Post like does not exist, so create a new one.
			newPostLike := &model.PostLike{
				ID:     uuid.NewString(),
				PostID: inputLike.PostID,
				UserID: inputLike.UserID,
				Liked:  true,
			}
			if err := r.DB.Create(newPostLike).Error; err != nil {
				return nil, err
			}
			return newPostLike, nil
		}
		// Error occurred while querying the database.
		return nil, err
	}

	like.Liked = !inputLike.Liked

	if err := r.DB.Save(&like).Error; err != nil {
		return nil, err
	}

	return like, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	var post *model.Post

	if err := r.DB.First(&post, "id = ?", id).Error; err != nil {
		return nil, err
	}

	return post, r.DB.Delete(&post).Error
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (*model.PostList, error) {
	var post *model.Post

	err := r.DB.First(&post, "id = ?", id).Error

	if err != nil {
		return nil, err
	}

	medias, err := r.GetAllMediaPost(ctx, post.ID)
	if err != nil {
		return nil, err
	}

	user, err := r.Query().GetUser(ctx, post.UserID)
	if err != nil {
		return nil, err
	}

	post.User = user

	comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
	if err != nil {
		return nil, err
	}

	likes, err := r.Query().GetAllLikePost(ctx, post.ID)

	if err != nil {
		return nil, err
	}

	postList := &model.PostList{
		Posts:    post,
		Medias:   medias,
		Comments: comments,
		Likes:    likes,
	}

	return postList, nil
}

// GetAllPost is the resolver for the getAllPost field.
func (r *queryResolver) GetAllPost(ctx context.Context, offset *int, limit *int) ([]*model.PostList, error) {
	var posts []*model.Post

	actualOffset := 0
	if offset != nil {
		actualOffset = *offset
	}

	actualLimit := 10 // You can adjust this default value as needed
	if limit != nil {
		actualLimit = *limit
	}

	if err := r.DB.Offset(actualOffset).Limit(actualLimit).Find(&posts).Error; err != nil {
		return nil, err
	}

	var postLists []*model.PostList

	for _, post := range posts {
		// fmt.Println(post)

		medias, err := r.GetAllMediaPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		user, err := r.Query().GetUser(ctx, post.UserID)
		if err != nil {
			return nil, err
		}

		post.User = user

		comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		likes, err := r.Query().GetAllLikePost(ctx, post.ID)

		if err != nil {
			return nil, err
		}

		postLists = append(postLists, &model.PostList{
			Posts:    post,
			Medias:   medias,
			Comments: comments,
			Likes:    likes,
		})
	}

	// fmt.Println(postLists)
	return postLists, nil
}

// GetAllPostNoRes is the resolver for the getAllPostNoRes field.
func (r *queryResolver) GetAllPostNoRes(ctx context.Context) ([]*model.PostList, error) {
	var posts []*model.Post

	if err := r.DB.Find(&posts).Error; err != nil {
		return nil, err
	}

	var postLists []*model.PostList

	for _, post := range posts {
		// fmt.Println(post)

		medias, err := r.GetAllMediaPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		user, err := r.Query().GetUser(ctx, post.UserID)
		if err != nil {
			return nil, err
		}

		post.User = user

		comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		likes, err := r.Query().GetAllLikePost(ctx, post.ID)

		if err != nil {
			return nil, err
		}

		postLists = append(postLists, &model.PostList{
			Posts:    post,
			Medias:   medias,
			Comments: comments,
			Likes:    likes,
		})
	}

	return postLists, nil
}

// GetAllMediaPost is the resolver for the getAllMediaPost field.
func (r *queryResolver) GetAllMediaPost(ctx context.Context, id string) ([]string, error) {
	var medias []*model.PostMedia
	if err := r.DB.Where("post_id = ?", id).Find(&medias).Error; err != nil {
		return nil, err
	}

	var mediaURLs []string
	for _, media := range medias {
		mediaURLs = append(mediaURLs, media.Media)
	}

	return mediaURLs, nil
}

// GetAllCommentPost is the resolver for the getAllCommentPost field.
func (r *queryResolver) GetAllCommentPost(ctx context.Context, id string) ([]*model.CommentList, error) {
	var comments []*model.PostComment
	if err := r.DB.Where("post_id = ?", id).Find(&comments).Error; err != nil {
		return nil, err
	}

	var commentList []*model.CommentList

	for _, comment := range comments {
		user, err := r.Query().GetUser(ctx, comment.UserID)
		if err != nil {
			return nil, err
		}
		comment.User = user

		likes, err := r.Query().GetAllLikeComment(ctx, comment.ID)
		if err != nil {
			return nil, err
		}

		replies, err := r.Query().GetAllReplyComment(ctx, comment.ID)
		if err != nil {
			return nil, err
		}

		commentList = append(commentList, &model.CommentList{
			Comment:       comment,
			Likecomments:  likes,
			Replycomments: replies,
		})
	}

	return commentList, nil
}

// GetAllLikePost is the resolver for the getAllLikePost field.
func (r *queryResolver) GetAllLikePost(ctx context.Context, id string) ([]*model.User, error) {
	var likes []*model.PostLike
	if err := r.DB.Where("post_id = ? AND liked = ?", id, true).Find(&likes).Error; err != nil {
		return nil, err
	}

	var users []*model.User

	for _, like := range likes {
		user, err := r.Query().GetUser(ctx, like.UserID)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}

	return users, nil
}

// GetAllPostUser is the resolver for the getAllPostUser field.
func (r *queryResolver) GetAllPostUser(ctx context.Context, userID string) ([]*model.PostList, error) {
	var posts []*model.Post

	if err := r.DB.Where("user_id = ?", userID).Find(&posts).Error; err != nil {
		return nil, err
	}

	var postLists []*model.PostList

	for _, post := range posts {
		// fmt.Println(post)

		medias, err := r.GetAllMediaPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		user, err := r.Query().GetUser(ctx, post.UserID)
		if err != nil {
			return nil, err
		}

		post.User = user

		comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		likes, err := r.Query().GetAllLikePost(ctx, post.ID)

		if err != nil {
			return nil, err
		}

		postLists = append(postLists, &model.PostList{
			Posts:    post,
			Medias:   medias,
			Comments: comments,
			Likes:    likes,
		})
	}

	// fmt.Println(postLists)
	return postLists, nil
}

// GetAllPostContent is the resolver for the getAllPostContent field.
func (r *queryResolver) GetAllPostContent(ctx context.Context, content string) ([]*model.PostList, error) {
	var posts []*model.Post

	if err := r.DB.Where("content LIKE ?", "%"+content+"%").Find(&posts).Error; err != nil {
		return nil, err
	}

	var postLists []*model.PostList

	for _, post := range posts {
		// fmt.Println(post)

		medias, err := r.GetAllMediaPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		user, err := r.Query().GetUser(ctx, post.UserID)
		if err != nil {
			return nil, err
		}

		post.User = user

		comments, err := r.Query().GetAllCommentPost(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		likes, err := r.Query().GetAllLikePost(ctx, post.ID)

		if err != nil {
			return nil, err
		}

		postLists = append(postLists, &model.PostList{
			Posts:    post,
			Medias:   medias,
			Comments: comments,
			Likes:    likes,
		})
	}

	return postLists, nil
}
